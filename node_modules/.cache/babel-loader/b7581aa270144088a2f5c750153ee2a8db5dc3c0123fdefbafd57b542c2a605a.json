{"ast":null,"code":"// Importing necessary action types from '../Imports'\nimport { ADD_TO_CART, CLEAR_CART, REMOVE_FROM_CART, SAVE_PAYMENT_METHOD, SAVE_SHIPPING_ADDRESS, USER_SIGNIN, USER_SIGNOUT } from '../Imports';\nexport const storeReducer = (state, _ref) => {\n  let {\n    type,\n    payload\n  } = _ref;\n  switch (type) {\n    case ADD_TO_CART:\n      // Extracting the payload (newItem) from the action\n      const newItem = payload;\n\n      // Checking if the item being added already exists in the cart\n      const existingItem = state.cart.cartItems.find(item => item._id === newItem._id);\n\n      // Updating the cartItems based on whether the item exists or not\n      const cartItems = existingItem ?\n      // If the item exists, map through the existing cartItems and replace the matching item with the new item\n      state.cart.cartItems.map(item => item._id === existingItem._id ? newItem : item) :\n      // If the item doesn't exist, add the new item to the existing cartItems\n      [...state.cart.cartItems, newItem];\n\n      // Saving the updated cartItems in localStorage\n      localStorage.setItem('cartItems', JSON.stringify(cartItems));\n\n      // Updating the state with the updated cartItems\n      return {\n        ...state,\n        cart: {\n          ...state.cart,\n          cartItems\n        }\n      };\n    case REMOVE_FROM_CART:\n      const itemToRemove = payload;\n\n      // Filtering out the item to be removed from the cartItems array\n      const updatedCartItems = state.cart.cartItems.filter(item => item._id !== itemToRemove._id);\n\n      // Saving the updated cartItems in localStorage\n      localStorage.setItem('cartItems', JSON.stringify(updatedCartItems));\n\n      // Updating the state with the updated cartItems\n      return {\n        ...state,\n        cart: {\n          ...state.cart,\n          cartItems: updatedCartItems\n        }\n      };\n    case CLEAR_CART:\n      const clearedCartItems = [];\n      localStorage.setItem('cartItems', JSON.stringify(clearedCartItems));\n\n      // Updating the state with the cleared cartItems\n      return {\n        ...state,\n        cart: {\n          ...state.cart,\n          cartItems: clearedCartItems\n        }\n      };\n    case USER_SIGNIN:\n      const userInfo = payload;\n\n      // Updating the state with the userInfo\n      return {\n        ...state,\n        userInfo\n      };\n    case USER_SIGNOUT:\n      // Clearing userInfo, cartItems, shippingAddress, and paymentMethod in the state\n      return {\n        ...state,\n        userInfo: null,\n        cart: {\n          cartItems: [],\n          shippingAddress: {},\n          paymentMethod: ''\n        }\n      };\n    case SAVE_SHIPPING_ADDRESS:\n      const shippingAddress = payload;\n\n      // Updating the state with the shippingAddress\n      return {\n        ...state,\n        cart: {\n          ...state.cart,\n          shippingAddress\n        }\n      };\n    case SAVE_PAYMENT_METHOD:\n      const paymentMethod = payload;\n\n      // Updating the state with paymentMethod\n      return {\n        ...state,\n        cart: {\n          ...state.cart,\n          paymentMethod\n        }\n      };\n    default:\n      return state;\n  }\n};","map":{"version":3,"names":["ADD_TO_CART","CLEAR_CART","REMOVE_FROM_CART","SAVE_PAYMENT_METHOD","SAVE_SHIPPING_ADDRESS","USER_SIGNIN","USER_SIGNOUT","storeReducer","state","_ref","type","payload","newItem","existingItem","cart","cartItems","find","item","_id","map","localStorage","setItem","JSON","stringify","itemToRemove","updatedCartItems","filter","clearedCartItems","userInfo","shippingAddress","paymentMethod"],"sources":["C:/Users/haim/Desktop/project/סופי/E-Shop/frontend/src/reducers/storeReducer.js"],"sourcesContent":["// Importing necessary action types from '../Imports'\nimport {\n  ADD_TO_CART,\n  CLEAR_CART,\n  REMOVE_FROM_CART,\n  SAVE_PAYMENT_METHOD,\n  SAVE_SHIPPING_ADDRESS,\n  USER_SIGNIN,\n  USER_SIGNOUT,\n} from '../Imports';\n\nexport const storeReducer = (state, { type, payload }) => {\n  switch (type) {\n    case ADD_TO_CART:\n      // Extracting the payload (newItem) from the action\n      const newItem = payload;\n\n      // Checking if the item being added already exists in the cart\n      const existingItem = state.cart.cartItems.find(\n        (item) => item._id === newItem._id\n      );\n\n      // Updating the cartItems based on whether the item exists or not\n      const cartItems = existingItem\n        ? // If the item exists, map through the existing cartItems and replace the matching item with the new item\n          state.cart.cartItems.map((item) =>\n            item._id === existingItem._id ? newItem : item\n          )\n        : // If the item doesn't exist, add the new item to the existing cartItems\n          [...state.cart.cartItems, newItem];\n\n      // Saving the updated cartItems in localStorage\n      localStorage.setItem('cartItems', JSON.stringify(cartItems));\n\n      // Updating the state with the updated cartItems\n      return { ...state, cart: { ...state.cart, cartItems } };\n\n    case REMOVE_FROM_CART:\n      const itemToRemove = payload;\n\n      // Filtering out the item to be removed from the cartItems array\n      const updatedCartItems = state.cart.cartItems.filter(\n        (item) => item._id !== itemToRemove._id\n      );\n\n      // Saving the updated cartItems in localStorage\n      localStorage.setItem('cartItems', JSON.stringify(updatedCartItems));\n\n      // Updating the state with the updated cartItems\n      return { ...state, cart: { ...state.cart, cartItems: updatedCartItems } };\n\n    case CLEAR_CART:\n      const clearedCartItems = [];\n\n      localStorage.setItem('cartItems', JSON.stringify(clearedCartItems));\n\n      // Updating the state with the cleared cartItems\n      return { ...state, cart: { ...state.cart, cartItems: clearedCartItems } };\n\n    case USER_SIGNIN:\n      const userInfo = payload;\n\n      // Updating the state with the userInfo\n      return { ...state, userInfo };\n\n    case USER_SIGNOUT:\n      // Clearing userInfo, cartItems, shippingAddress, and paymentMethod in the state\n      return {\n        ...state,\n        userInfo: null,\n        cart: { cartItems: [], shippingAddress: {}, paymentMethod: '' },\n      };\n\n    case SAVE_SHIPPING_ADDRESS:\n      const shippingAddress = payload;\n\n      // Updating the state with the shippingAddress\n      return { ...state, cart: { ...state.cart, shippingAddress } };\n\n    case SAVE_PAYMENT_METHOD:\n      const paymentMethod = payload;\n\n      // Updating the state with paymentMethod\n      return { ...state, cart: { ...state.cart, paymentMethod } };\n\n    default:\n      return state;\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}